#!/bin/bash

# Examples of using the smart resume capabilities in wf-assembly-snps
# These examples show how to avoid repeating CONVERT_GINGR_TO_FASTA_HARVESTTOOLS

echo "wf-assembly-snps Smart Resume Examples"
echo "======================================"
echo ""

# Set example paths (modify these for your actual data)
PARSNP_OUTPUTS="/mnt/disks/ngs-data/parsnp-dgx"
OUTPUT_DIR="/mnt/disks/ngs-data/results_322_genomes"
PROFILE="google_vm_large"
MAX_MEMORY="1400.GB"

echo "Example paths used in this script:"
echo "  ParSNP outputs: $PARSNP_OUTPUTS"
echo "  Output directory: $OUTPUT_DIR"
echo "  Profile: $PROFILE"
echo ""

echo "1. Check Resume Options (recommended first step)"
echo "================================================"
echo "This command checks what resume options are available:"
echo ""
echo "./bin/check_resume_options.sh $PARSNP_OUTPUTS $OUTPUT_DIR"
echo ""

echo "2. Auto-Detection Resume (recommended approach)"
echo "==============================================="
echo "The pipeline automatically detects existing alignment files:"
echo ""
echo "For Gubbins:"
echo "nextflow run main.nf \\"
echo "  -profile $PROFILE \\"
echo "  --parsnp_outputs $PARSNP_OUTPUTS \\"
echo "  --outdir $OUTPUT_DIR \\"
echo "  --recombination gubbins \\"
echo "  --max_memory $MAX_MEMORY"
echo ""
echo "For ClonalFrameML:"
echo "nextflow run main.nf \\"
echo "  -profile $PROFILE \\"
echo "  --parsnp_outputs $PARSNP_OUTPUTS \\"
echo "  --outdir $OUTPUT_DIR \\"
echo "  --recombination clonalframeml \\"
echo "  --max_memory $MAX_MEMORY"
echo ""

echo "3. Force Skip GINGR Conversion"
echo "=============================="
echo "Explicitly skip the GINGR conversion step:"
echo ""
echo "nextflow run main.nf \\"
echo "  -profile $PROFILE \\"
echo "  --parsnp_outputs $PARSNP_OUTPUTS \\"
echo "  --outdir $OUTPUT_DIR \\"
echo "  --recombination gubbins \\"
echo "  --skip_gingr_conversion \\"
echo "  --max_memory $MAX_MEMORY"
echo ""

echo "4. Specify Exact Alignment File"
echo "==============================="
echo "Use a specific alignment file:"
echo ""
echo "nextflow run main.nf \\"
echo "  -profile $PROFILE \\"
echo "  --parsnp_outputs $PARSNP_OUTPUTS \\"
echo "  --outdir $OUTPUT_DIR \\"
echo "  --recombination gubbins \\"
echo "  --alignment_file $OUTPUT_DIR/Parsnp/Parsnp.Core_Alignment.fasta \\"
echo "  --max_memory $MAX_MEMORY"
echo ""

echo "5. Resume from Specific Step (future feature)"
echo "============================================="
echo "Resume from a specific workflow step:"
echo ""
echo "nextflow run main.nf \\"
echo "  -profile $PROFILE \\"
echo "  --parsnp_outputs $PARSNP_OUTPUTS \\"
echo "  --outdir $OUTPUT_DIR \\"
echo "  --recombination gubbins \\"
echo "  --resume_from alignment \\"
echo "  --max_memory $MAX_MEMORY"
echo ""

echo "Key Benefits:"
echo "============="
echo "• Saves time by skipping GINGR conversion when alignment exists"
echo "• Works with both Gubbins and ClonalFrameML"
echo "• Automatic detection of existing files"
echo "• Multiple fallback locations checked"
echo "• Clear logging of what files are found and used"
echo ""

echo "File Locations Checked (in order):"
echo "==================================="
echo "1. User-specified --alignment_file"
echo "2. Previous run output: \$outdir/Parsnp/Parsnp.Core_Alignment.fasta"
echo "3. ParSNP outputs: \$parsnp_outputs/Parsnp.Core_Alignment.fasta"
echo ""

echo "Log Messages to Look For:"
echo "========================="
echo "• 'Auto-detected resume point: alignment file exists'"
echo "• 'Skipping CONVERT_GINGR_TO_FASTA_HARVESTTOOLS'"
echo "• 'Found existing alignment file: /path/to/file'"
echo "• 'Running CONVERT_GINGR_TO_FASTA_HARVESTTOOLS' (if conversion needed)"
echo ""

echo "Troubleshooting:"
echo "================"
echo "• Run check_resume_options.sh first to see what's available"
echo "• Check Nextflow log for 'Auto-detected' messages"
echo "• Use --skip_gingr_conversion to force skipping"
echo "• Use --alignment_file to specify exact file path"
echo ""

echo "Performance Impact:"
echo "=================="
echo "• GINGR conversion can take 30+ minutes for large datasets"
echo "• Smart resume can save hours on repeated runs"
echo "• Especially beneficial when testing different recombination methods"
echo "• No impact on final results - same alignment file is used"