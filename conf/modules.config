/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

process {
    /*
    ================================================================================
                            All modules
    ================================================================================
    */
    publishDir =  [
        [
            // QC file checks
            path:    params.qc_filecheck_log_dir,
            mode:    params.publish_dir_mode,
            pattern: "*_File.tsv"
        ],
        [
            // Stdout and stderr
            path:    params.process_log_dir,
            mode:    params.publish_dir_mode,
            pattern: ".command.{out,err}",
            saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
        ]
    ]

    /*
    ================================================================================
                            Module specific
    ================================================================================
    */

    withName: CORE_GENOME_ALIGNMENT_PARSNP {
        publishDir = [
            [
                path:    { "${params.outdir}/Parsnp" },
                mode:    params.publish_dir_mode,
                pattern: "Parsnp.*"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${task.process}${filename}" }
            ]
        ]
    }

    withName: CALCULATE_PAIRWISE_DISTANCES_SNP_DISTS {
        publishDir = [
            [
                path:    { "${params.outdir}/Parsnp" },
                mode:    params.publish_dir_mode,
                pattern: "*.tsv"
            ],
            [
                path:    { "${params.outdir}/Summaries" },
                mode:    params.publish_dir_mode,
                pattern: "*.tsv",
                saveAs:  { filename -> "Summary.${meta.snp_package}.Distance_Pairs.tsv" }
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${task.process}${filename}" }
            ]
        ]
    }

    withName: CREATE_SNP_DISTANCE_MATRIX_SNP_DISTS {
        publishDir = [
            [
                path:    { "${params.outdir}/Parsnp" },
                mode:    params.publish_dir_mode,
                pattern: "*.tsv"
            ],
            [
                path:    { "${params.outdir}/Summaries" },
                mode:    params.publish_dir_mode,
                pattern: "*.SNP-Distances-Matrix.tsv",
                saveAs:  { filename -> "Summary.${meta.snp_package}.Distance_Matrix.tsv" }
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${task.process}${filename}" }
            ]
        ]
    }

    withName: CONVERT_GINGR_TO_FASTA_HARVESTTOOLS {
        publishDir = [
            [
                path:    { "${params.outdir}/Parsnp" },
                mode:    params.publish_dir_mode,
                pattern: "*.fasta"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${task.process}${filename}" }
            ]
        ]
    }

    withName: RECOMBINATION_CLONALFRAMEML {
        publishDir = [
            [
                path:    { "${params.outdir}/${meta.snp_package}/ClonalFrameML" },
                mode:    params.publish_dir_mode,
                pattern: "*ClonalFrameML*"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${task.process}${filename}" }
            ]
        ]
    }

    withName: RECOMBINATION_GUBBINS {
        cpus   = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 600.GB * task.attempt, 'memory' ) }
        time   = { check_max( 72.h * task.attempt, 'time' ) }
        errorStrategy = 'retry'
        maxRetries = 3
        publishDir = [
            [
                path:    { "${params.outdir}/${meta.snp_package}/Gubbins" },
                mode:    params.publish_dir_mode,
                pattern: "*Gubbins*"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${task.process}${filename}" }
            ]
        ]
    }

    withName: MASK_RECOMBINANT_POSITIONS_BIOPYTHON {
        publishDir = [
            [
                path:    { "${params.outdir}/${meta.snp_package}/${meta.recombination}" },
                mode:    params.publish_dir_mode,
                pattern: "*.fasta"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${task.process}${filename}" }
            ]
        ]
    }

    withName: CREATE_MASKED_SNP_DISTANCE_MATRIX_SNP_DISTS {
        publishDir = [
            [
                path:    { "${params.outdir}/${meta.snp_package}/${meta.recombination}" },
                mode:    params.publish_dir_mode,
                pattern: "*.tsv"
            ],
            [
                path:    { "${params.outdir}/Summaries" },
                mode:    params.publish_dir_mode,
                pattern: "*.tsv",
                saveAs:  { filename -> "Summary.${meta.snp_package}.Masked_Distance_Matrix.tsv" }
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${task.process}${filename}" }
            ]
        ]
    }

    withName: BUILD_PHYLOGENETIC_TREE_PARSNP {
        publishDir = [
            [
                path:    { "${params.outdir}/${meta.snp_package}/${meta.recombination}" },
                mode:    params.publish_dir_mode,
                pattern: "*.tree"
            ],
            [
                path:    { "${params.outdir}/Summaries" },
                mode:    params.publish_dir_mode,
                pattern: "*.tree"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${task.process}${filename}" }
            ]
        ]
    }
}
